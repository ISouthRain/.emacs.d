;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; markdown-toc 生成目录
(use-package markdown-toc
  :defer 2
  :ensure t
  )
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; markdown-mode
(use-package markdown-mode
  :defer 2
  :ensure t
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
(defun markdown-file-start-myself ()
(interactive) ; 如果不需要定义成命令，这句可以不要。
(when (string= "gnu/linux" system-type)
  (find-file "~/Ubuntu/ubuntu-fs/root/Hugo/content/posts/Home.md"))
(when (string= "darwin" system-type)
  (find-file "~/Desktop/Hugo/content/posts/Home.md"))
(when (string= "windows-nt" system-type)
  (find-file "F:\\Hugo\\content\\posts\\Home.md"))
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; hydra-vim-autocmd-markdown-mode
(defhydra hydra-vim-autocmd-markdown-mode (:color pink
                                           :hint nil
                                           :foreign-keys warn ;; 不要使用hydra以外的键
					   )
"
_ct_: 粗体          _xt_: 斜体        _cxt_: 粗斜体
_t_: 当前日期时间   _T_: 日期
_k_: 块             _K_: 代码块
_sc_: 删除线        _xh_: 下划线      _fg_: 分隔线
_lj_: 内部链接      _wlj_: 外链接
_yy_: 引用          _yt_: 嵌套引用
_1_: 标题-1         _2_: 标题-2       _3_: 标题-3
_4_: 标题-4         _5_: 标题-5       _6_: 标题-6
_jz_: 脚注
_bgz_: 表格居中     _bgy_: 表格居右   _bgt_: 表格居左
"
  ("ct" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " **** <++>")
         ;; (backward-char &optional N)
         (backward-char 7))
	:exit t)
  ("xt" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " ** <++>")
         ;; (backward-char &optional N)
         (backward-char 6))
	:exit t)
  ("cxt" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " ****** <++>")
         ;; (backward-char &optional N)
         (backward-char 8))
	:exit t)
  ("t" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
	 (insert (format-time-string "%Y-%m-%d %H:%M:%S")))
	:exit t)
  ("T" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
	 (insert (format-time-string "%Y-%m-%d")))
	:exit t)
  ("k" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " `` <++>")
         ;; (backward-char &optional N)
         (backward-char 6))
	:exit t)
  ("K" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         ;; (insert "``````<++>")
	 (insert "``` ")
	 (newline)
	 (insert "```<++>")
         ;; (backward-char &optional N)
         (backward-char 9))
	:exit t)
  ("sc" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " ~~~~ <++>")
         ;; (backward-char &optional N)
         (backward-char 7))
	:exit t)
  ("xh" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " <u></u> <++>")
         ;; (backward-char &optional N)
         (backward-char 9))
	:exit t)
  ("lj" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " [](<++>) <++>")
         ;; (backward-char &optional N)
         (backward-char 12))
	:exit t)
  ("wlj" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " ![](<++>) <++>")
         ;; (backward-char &optional N)
         (backward-char 12))
	:exit t)
  ("yy" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "> "))
	:exit t)
  ("yt" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert ">> "))
	:exit t)
  ("1" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "# "))
	:exit t)
  ("2" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "## "))
	:exit t)
  ("3" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "### "))
	:exit t)
  ("4" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "#### "))
	:exit t)
  ("5" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "##### "))
	:exit t)
  ("6" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "###### "))
	:exit t)
  ("fg" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert "----"))
	:exit t)
  ("jz" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " [^] <++>")
         ;; (backward-char &optional N)
         (backward-char 6))
	:exit t)
  ("bgz" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " :-: "))
	:exit t)
  ("bgy" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " -: "))
	:exit t)
  ("bgt" (lambda ()
	 (interactive)
         ;;(insert &rest ARGS)
         (insert " :- "))
	:exit t)
  ("q" nil "cancel")
  ("<escape>" nil "cancel")
  )

) ;; use-package end




(provide 'init-markdown)
